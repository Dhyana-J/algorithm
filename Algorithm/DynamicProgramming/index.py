# Dynamic Programming - 한 번 계산한 문제는 다시 계산하지 않도록 하는 알고리즘
# 컴퓨터의 자원(연산 속도, 메모리 공간)의 제약이 있기 때문에 이를 최대한 활용할 수 있도록 프로그램을 작성해야한다.
# 특정 문제들은 메모리 공간을 좀 더 활용하면 연산 속도를 비약적으로 증가시킬 수 있는데, 다이나믹 프로그래밍이 대표적인 방법이다.

"""
# 다이나믹 프로그래밍은 다음과 같은 조건이 만족되면 사용할 수 있다. (프랙탈?)
    1. 큰 문제를 작은 문제로 나눌 수 있다.
    2. 작은 문제에서 구한 정답은 그 문제를 포함하는 큰 문제에서도 동일하다. 

    Memoization(=Caching)은 다이나믹 프로그래밍을 구현하는 기법 중 하나로, 한번 구한 결과를 메모리에 기록해두고, 
    같은 식을 다시 호출하면 메모리에서 기록한 결과를 다시 가져와 활용하는 방법이다.

    재귀적으로 구현하면 top-down (큰 문제 해결을 위해 작은 문제를 호출하므로)
    반복문으로 구현하면 bottom-up (작은 문제부터 차근차근 답 도출)

"""