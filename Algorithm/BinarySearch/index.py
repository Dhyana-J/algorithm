# Binary Search (이진 탐색) - 탐색 범위를 반으로 좁혀가며 빠르게 탐색하는 알고리즘
# 배열 내부가 정렬되어있어야만 사용할 수 있는 알고리즘이다. 위치를 나타내는 변수 3개(시작점, 중간점(소수점 버림처리), 끝점)를 사용한다. 
# 한 번 확인할 때 마다 확인하는 원소가 절반씩 줄어든다는 점에서 시간복잡도가 O(logN)
# 두 가지 구현 방법이 있다. 1. 재귀함수, 2. 단순반목문 사용
# 데이터 개수가 천만 개 이상이거나 탐색 범위가 천억 이상인 경우 이진 탐색 알고리즘을 의심해보자.

# Tree - 그래프 자료구조의 일종이다. 부모노드와 자식노드간 관계로 표현된다. 많은 양의 데이터 관리에 적합하다.
"""
* Binary Search Tree(이진 탐색 트리)

- 트리 자료구조중 가장 간단한 형태
- 이진 탐색이 효율적으로 동작할 수 있도록 고안된 트리
- 부모 노드보다 왼쪽 자식 노드는 작고, 오른쪽 자식 노드는 크다.

"""

# 입력 데이터 개수가 많은 문제에 input()을 사용하면, 동작속도가 느려 시간 초과 판정을 받을 수 있다.
# 그래서, sys라이브러리의 readline 함수를 사용하면 시간 초과를 피할 수 있다. 

import sys
input_data = sys.stdin.readline().rstrip() # rstrip() 안써주면 enter가 줄바꿈 기호로 입력되어 예상치 못한 결과가 나올 수 있다.
print(input_data)
